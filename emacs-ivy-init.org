#+TITLE: Emacs Configuration
#+AUTHOR: Denis Tranchemontagne
#+Email: dtranche@gmail.com

The idea is taken from a series of videos including
[[https://www.youtube.com/watch?v=VIuOwIBL-ZU]]
[[https://www.youtube.com/watch?v=gRb3bq0NiXY&feature=youtu.be]]

use-package is described here [[https://github.com/jwiegley/use-package]]

I've taken liberally from lots of sources on the web.  I may try to link some more
here.

C-c ' -- for org babel

* Enable Use-package
#+begin_src emacs-lisp :tangle yes
;; Put your whole init here
(message "Updated <2017-11-10 Fri>")
(eval-when-compile
  (require 'use-package))
#+end_src

* User Information
#+begin_src emacs-lisp
  (setq user-full-name "Denis Tranchemontagne"
        user-mail-address "dtranche@gmail.com")
  (defvar user (getenv "USER"))
#+end_src

* Set Customization Files
#+begin_src emacs-lisp
  (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
  (load custom-file)
#+end_src

* Sane Defaults
Emacs needs some tweeking out of the box. This will get some of the annoyances gone.
#+begin_src emacs-lisp
  (setenv "PATH"
          (concat "/opt/redline/inrush/examples"
                  (getenv "PATH")))
  ;; don't need a tool-bar
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (setq inhibit-startup-message -1)
  (setq-default tab-width 2)
  (setq-default indent-tabs-mode -1)
  (setq linenum-format "%d ")
  (line-number-mode t)
  (column-number-mode t)
  (xterm-mouse-mode t)
  ;;S-Up S-Down S-Left S-Right
  (windmove-default-keybindings)

  (fset 'yes-or-no-p 'y-or-n-p)
  ;; because I hate trailing whitespace
  (add-hook 'before-save-hook 'delete-trailing-whitespace)

  ;; not sure where to put this yet
  (setq load-path (cons "/home/denist/bin/" load-path))

  (add-to-list 'auto-mode-alist '("\\.cc\\'" . c-mode ))
  (add-to-list 'auto-mode-alist '("ratts\/scripts" . python-mode))

#+end_src

* Appearance
Just a simple light brown theme
#+begin_src emacs-lisp
  ;; (use-package alect-themes
  ;;   :ensure t
  ;;   :config
  ;;   ( load-theme 'alect-light-alt t))
 #+end_src

* Custom Functions
#+begin_src emacs-lisp
  (defun match-paren (arg)
     "Go to the matching paren if on a paren; otherwise insert %."
     (interactive "p")
       (cond ((looking-at "\\s\(") (forward-list 1) (backward-char 1))
             ((looking-at "\\s\)") (forward-char 1) (backward-list 1))
             (t (self-insert-command (or arg 1)))))

  (defun prada ()
     (interactive)
     (find-file "/ssh:denist@prada:/home/denist/working_dir"))

  (defun get-point ( symbol &optional arg )
    "get the point"
    (funcall symbol arg )
    (point)
    )

  (defun copy-thing ( begin-of-thing end-of-thing &optional arg )
    "copy thing between beg & end into kill ring"
    (save-excursion
      (let ((beg (get-point begin-of-thing 1))
            (end (get-point end-of-thing arg)))
        (copy-region-as-kill beg end)))
    )

  (defun copy-word (&optional arg)
    "Copy words at point into kill-ring"
    (interactive "P")
    (copy-thing 'backward-word 'forward-word arg)
    )

  (global-set-key (kbd "C-b") 'copy-word)

  (require 'ansi-color)
  (defun my/ansi-colorize-buffer ()
    (let ((buffer-read-only nil))
      (ansi-color-apply-on-region (point-min) (point-max))))

#+end_src

better move to beginning of line
#+BEGIN_SRC emacs-lisp
  (defun smarter-move-beginning-of-line (arg)
    "Move point back to indentation of beginning of line.

    Move point to the first non-whitespace character on this line.
    If point is already there, move to the beginning of the line.
    Effectively toggle between the first non-whitespace character and
    the beginning of the line.

    If ARG is not nil or 1, move forward ARG - 1 lines first.  If
    point reaches the beginning or end of the buffer, stop there."
    (interactive "^p")
    (setq arg (or arg 1))

    ;; Move lines first
    (when (/= arg 1)
      (let ((line-move-visual nil))
    (forward-line (1- arg))))

    (let ((orig-point (point)))
     (back-to-indentation)
     (when (= orig-point (point))
      (move-beginning-of-line 1))))

  (global-set-key [remap move-beginning-of-line]
                   'smarter-move-beginning-of-line)

#+END_SRC

remote shell
#+BEGIN_SRC emacs-lisp
  (defun remote-shell (&optional host)
    "Open a remote shell to a host."
    (interactive)
    (with-temp-buffer
      (let ((host (if host host (read-string "Host: "))))
        (cd (concat "/ssh:denist@" host ":"))
        (shell (concat "*" host "*")))))

  (defun prada-shell ()
    (interactive)
    (remote-shell "prada"))
#+END_SRC

align whitespace
#+BEGIN_SRC emacs-lisp
(defun align-whitespace (start end)
  "Align columns by whitespace"
  (interactive "r")
  (align-regexp start end
                "\\(\\s-*\\)\\s-" 1 0 t))
#+END_SRC


#+RESULTS:
: copy-word
:
* Global Key Bindings
#+begin_src emacs-lisp
  ;; Key mappings that aren't source specific
  ;; I don't know what I'd do with out this one
  (define-key global-map "\C-xg" 'magit-status)
  (define-key global-map [delete] 'delete-char)
  (define-key global-map [backspace] 'delete-backward-char)
  (define-key global-map [end] 'end-of-line )
  (global-unset-key [f10] )

  (define-key global-map [f1] 'goto-line)
  (define-key global-map [f2] 'undo)
  (define-key global-map [f10] 'next-error)
  (define-key global-map "\C-w" 'backword-kill-word)
  (global-set-key [remap forward-word] 'forward-symbol)

  ;;(define-key c-mode-base-map [f3] 'ag-project)
  (define-key global-map "\C-f" 'find-file)
  (global-set-key "%" 'match-paren)
  (when (display-graphic-p)
    (define-key global-map "\M-w" 'kill-ring-save)
    (if (eq system-type 'darwin)
        (setq mac-command-modifier 'meta)))


#+end_src

* C/C++ Programming
#+begin_src emacs-lisp
  (use-package cc-mode
    :bind ([f9] . compile)

    :preface
    (defun my-c-mode-hook()
      (which-function-mode 1)
      (message "In my-c-mode-hook")
      (define-key c-mode-map [f3] `ag-project-regexp)
      (define-key c-mode-map [f4] `counsel-imenu)
      (let ((bufname (buffer-file-name)))
        ;;(message (format "The buffer is %s" bufname))
        (when bufname
          (cond
           ((string-match "/denist/" bufname)
            (c-set-style "redline")

            (message "Redline c-style"))
           ((string-match "/denistranchemontagne" bufname)
            (c-set-style "dtranche")
            (message "dtranche c-style"))
           (t
            (c-set-style "k&r")
            (message "k&r cstyle"))))))
    :config
    (add-hook 'c-mode-common-hook 'my-c-mode-hook)
    (modify-syntax-entry ?_ "w" c-mode-syntax-table)
    (add-to-list 'c-style-alist
                 '("redline"
                   (indent-tabs-mode . nil)
                   (setq mode-name "Redline C Style")
                   (c-basic-offset . 5)
                   (c-basic-indent . 5)))
    (add-to-list 'c-style-alist
                 '("dtranche"
                   (indent-tabs-mode . nil)
                   (setq mode-name "dtranche C Style")
                   (c-basic-offset . 2)
                   (c-basic-indent . 2)))
    ;; move to redline mode
    (setq compile-history
          '("make -j 32 server_check_native"
            "make -j 32 server_fast_native"
            "make -j 32 server_rpm_native"
            "make -j 32 server_debug_rhel7_x86_64"
            "make -j 32 server_rpm_rhel7_x86_64"
            "make -j 32 server_debug_rhel6_x86_64"
            "make -j 32 server_rpm_rhel6_x86_64"
            "git clean -fd"
            "make -j 32 clean")))

#+end_src

* Packages
** auto-complete
#+begin_src emacs-lisp
  (use-package auto-complete
    :diminish auto-complete-mode
    :bind (:map ac-complete-mode-map (("C-n" . ac-next)
                                      ("C-p" . ac-previous)))
    :init
    (progn
      (ac-config-default)
      (global-auto-complete-mode t)))
#+end_src

** ag
#+begin_src emacs-lisp
  (use-package ag
    :init
    (setq ag-highlight-search t)
    :config
    (add-to-list 'ag-arguments "--noaffinity"))
#+end_src

** Org
To execute the block of code use org-babel-execute-src-block
To switch to editing mode C-c ' (single quote)
#+begin_src emacs-lisp
  (use-package org
    :bind (:map org-mode-map ([f3] . org-babel-execute-src-block))
  )
  (use-package org-bullets
    :ensure t
    :init (add-hook 'org-mode-hook 'org-bullets-mode))

#+end_src


** xcscope
# #+begin_src emacs-lisp
#   (use-package xcscope
#     :bind
#     (([f5] . cscope-find-global-definition)
#      ([f6] . cscope-find-this-symbol)
#      ([shift f6] . cscope-find-this-text-string))
#     )
# #+end_src

** swiper, ivy et. al- ivy is simpler
#+begin_src emacs-lisp
    (use-package counsel
      :ensure t
      :bind
      ("C-x C-f" . counsel-git)
      ;;  (("M-y" . counsel-yank-pop)
      ;;   :map ivy-minibuffer-map
      ;;    ("M-y" . ivy-next-line)))
      )

    (use-package ivy
      :ensure t
      :diminish (ivy-mode)
      :bind (("C-x b" . ivy-switch-buffer)
             ;;([f1] . swiper)
             (:map minibuffer-local-map
                   ([f10] . ivy-next-line)
                   ([shift-f10] . ivy-previous-line)))
      :config
        (ivy-mode 1)
        (setq ivy-use-virtual-buffers t)
        (setq ivy-display-style 'fancy)
        (setq ivy-format-function 'ivy-format-function-arrow)
        (setq ivy-initial-inputs-alist nil)
        (defun my-ivy-kill-buffer (buf)
          (interactive)
          (if (get-buffer buf)
          (kill-buffer buf)
          (setq recentf-list (delete (cdr (assoc buf ivy--virtual-buffers)) recentf-list))))

        (ivy-set-actions
         'ivy-switch-buffer
         '(("k"
            (lambda (x)
              (my-ivy-kill-buffer x)
              (ivy--reset-state ivy-last))
            "kill"
            )))
        )

    (use-package swiper
      :ensure t
      :bind (("C-s"      . swiper)
             ("C-r"      . swiper)
             ("C-c C-r"  . ivy-resume)
             ("M-x"      . counsel-M-x))
      :config
        (define-key read-expression-map (kbd "C-r") 'counsel-expression-history)
        )

    (use-package avy
      :ensure t
      :init (setq avy-background t)
      :bind ("M-s" . avy-goto-word-or-subword-1))
#+end_src

# #+RESULTS
** ace
#+begin_src emacs-lisp
  (use-package ace-window
    :ensure t
    :bind ("C-x o" . 'ace-window))
#+end_src
** linenum
#+begin_src emacs-lisp
;;  (use-package linum-mode
;;    :init (setq linenum-format "%d "))
#+end_src
** ediff
	 #+begin_src emacs-lisp
  (use-package ediff
    :config
    (setq ediff-split-window-function 'split-window-horizontally)
    (setq ediff-window-setup-function 'ediff-setup-windows-plain))
	 #+end_src
** magit
   #+begin_src emacs-lisp
     (use-package magit
       :ensure t
       :bind
       ("C-x g" . magit-status))
   #+end_src
** which-key
   #+begin_src emacs-lisp
     (use-package which-key
       :ensure t
       :diminish (which-key-mode))
	 #+end_src

* Hydras
Try and make my use of emacs more efficient
** movement-hydra
#+begin_src emacs-lisp
  (nlinum-relative-mode)
  (global-set-key
   (kbd "C-n")
   (defhydra hydra-move
     (:pre (nlinum-mode 1)
      :post (nlinum-mode -1))
     "move"
     ("n" next-line "down")
     ("p" previous-line "up")
     ("f" forward-char "forward")
     ("b" backward-char "back")
     ("a" beginning-of-line "start of line")
     ("B" beginning-of-defun "start of func")
     ("E" end-of-defun "end of func")
     ("e" move-end-of-line "end of line")
     ("g" goto-line "goto-line")
     ("v" scroll-up-command)
     ;; Converting M-v to V here by analogy.
     ("V" scroll-down-command)
     ("l" recenter-top-bottom)
     ("q" nil )))
#+end_src
** ggtags-hydra
#+begin_src emacs-lisp
(global-set-key
 (kbd "C-t")
 (defhydra hydra-tags
	 (:pre (ggtags-mode 1 ) )
	 "gtags"
	 ("." ggtags-find-tag-dwim "dwim")
	 ("d" ggtags-find-definition "definition")
	 ("f" ggtags-find-file "file")
	 ("r" ggtags-find-reference "ref.")
	 ("x" ggtags-find-tag-regexp "regex")
	 ("q" nil)))
#+end_src

* Stuff to add
# (define-key ac-complete-mode-map (kbd "C-n") 'ac-next)

# (define-key ac-complete-mode-map (kbd "C-p") 'ac-previous)

# * Things to test
# #+begin_src emacs-lisp
#     ;; this is just a test package didn't work
#     (use-package nyan-mode
#       :disabled
#       :ensure nil)
#     (use-package ace-jump-mode
#       :disabled
#       :ensure nil)
# #+end_src
# USE WHEN THE COMPILATION BUFFER GETS MESSED UP
# (require 'ansi-color)
# (defun my/ansi-colorize-buffer ()
#   (let ((buffer-read-only nil))
#     (ansi-color-apply-on-region (point-min) (point-max))))
	# (add-hook 'compilation-filter-hook 'my/ansi-colorize-buffer)

* Removed
