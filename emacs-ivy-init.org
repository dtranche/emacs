#+TITLE: Emacs Configuration
#+AUTHOR: Denis Tranchemontagne
#+Email: dtranche@gmail.com

The idea is taken from a series of videos including
[[https://www.youtube.com/watch?v=VIuOwIBL-ZU]]
[[https://www.youtube.com/watch?v=gRb3bq0NiXY&feature=youtu.be]]

use-package is described here [[https://github.com/jwiegley/use-package]]

I've taken liberally from lots of sources on the web.  I may try to link some more
here.

(\C-c ') -- for org babel

* Enable Use-package
#+begin_src emacs-lisp :tangle yes
;; Put your whole init here
(eval-when-compile
  (require 'use-package))
#+end_src

* User Information
#+begin_src emacs-lisp
  (setq user-full-name "Denis Tranchemontagne"
        user-mail-address "dtranche@gmail.com")
  (defvar user (getenv "USER"))
#+end_src


* Set Customization Files
#+begin_src emacs-lisp
  (unless (display-graphic-p)
	  (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
	  (load custom-file))

  ;; Add OS dependent code here
  (when (string-equal system-type "darwin")
	  (setenv "PATH" (concat (concat (getenv "PATH") ":/usr/local/bin") ":/usr/bin"))
	  (setq exec-path (append exec-path '("/usr/local/bin"))))
#+end_src
* Time Startup
#+begin_src emacs-lisp
	;; (add-hook 'emacs-startup-hook
	;; 	 (lambda ()
	;; 		 (message "Emacs ready in %s with %d garbage collections."
	;; 			 (format "%.2f seconds"
	;; 				 (float-time
	;; 					 (time-subtract after-init-time before-init-time)))
	;; 		gcs-done)))
#+end_src
* Sane Defaults
Emacs needs some tweeking out of the box. This will get some of the annoyances gone.
#+begin_src emacs-lisp
	(setenv "PATH"
					(concat "/opt/redline/inrush/examples"
									(getenv "PATH")))
	;; don't need a tool-bar
	(tool-bar-mode -1)
	;;(scroll-bar-mode -1)
	(setq inhibit-startup-message -1)
	(setq-default tab-width 2)
	(setq-default indent-tabs-mode -1)
	(setq linenum-format "%d ")
	(line-number-mode t)
	(column-number-mode t)
	(xterm-mouse-mode t)
	;;S-Up S-Down S-Left S-Right
	(windmove-default-keybindings)

	(fset 'yes-or-no-p 'y-or-n-p)
	;; because I hate trailing whitespace
	(add-hook 'before-save-hook 'delete-trailing-whitespace)

	;; not sure where to put this yet
	(setq load-path (cons "/home/denist/bin/" load-path))
	;; would like to move into a redline defined sections
	(add-to-list 'auto-mode-alist '("\\.cc\\'" . c-mode ))
	(add-to-list 'auto-mode-alist '("ratts\/scripts" . python-mode))
	(add-to-list 'auto-mode-alist '("makefiles\/" . makefile-mode))
	(setq compile-history
	'("make -j 8 USE_SANITIZE=0 server_debug_native"
		"make -j 8 USE_SANITIZE=0 server_rpm_native"
		" make -j 8 server_debug_rhel7_x86_64"
		"make -j 8 server_rpm_rhel7_x86_64"
		"make RTS_COMMON_PATH=/home/denist/rts-common -j 8 server_debug_rhel7_x86_64"
		"make RTS_COMMON_PATH=/home/denist/rts-common -j 8 server_rpm_rhel7_x86_64"
		"make RTS_COMMON_PATH=/home/denist/rts-common -j 8 realclean"
		"make -j 8 server_rpm_rhel7_x86_64"
		"make -j 8 server_debug_native"
		"make -j 8 server_rpm_native"
		"git clean -fd"
		"make -j 32 clean"))


#+end_src

* Appearance
Use an improved simple modeline
#+begin_src emacs-lisp
	(setq-default mode-line-format
				'(
					;; add a noticeable red block that says 'READ ONLY' when the file's, er, read only
					(:eval
					 (when (eql buffer-read-only t)
							 ;; propertize adds metadata to text, so you can add colours and formatting, amongst other things
							 (propertize " READ ONLY " 'face
													 '(:background "color-88" :foreground "white" :weight bold))))
					;; show the buffer filename, with a green background when unmodified/saved and a red one when modified
					(:eval
					 (propertize " %b " 'face
											 (if (buffer-modified-p)
													 '(:background "red" :foreground "white" :weight bold)
												 '(:background "green" :foreground "black" :weight bold))))
					;; show the current major mode in use (use obsolete format because trailing spaces nice it up)
					(:propertize " %m " face (:background "grey"))
					;; show the current branch and VCS in use, if there is one
					(:propertize (vc-mode vc-mode) face (:weight normal))
					" "
					;; show the function
					mode-line-misc-info
					" "
					mode-line-process
					" "
					;; show the line number and column number (no 'All', 'Top', 'Bottom', etc.)
					(:propertize " %l:%c " face (:background "blue" :foreground "white" :weight light))))
#+end_src

In certain cases compile output gets messy, this fixes that
#+begin_src emacs-lisp
(require 'ansi-color)
(defun my/ansi-colorize-buffer ()
(let ((buffer-read-only nil))
     (ansi-color-apply-on-region (point-min) (point-max))))
 (add-hook 'compilation-filter-hook 'my/ansi-colorize-buffer)

#+end_src
* Custom Functions
#+begin_src emacs-lisp
	(defun match-paren (arg)
		 "Go to the matching paren if on a paren; otherwise insert %."
		 (interactive "p")
			 (cond ((looking-at "\\s\(") (forward-list 1) (backward-char 1))
						 ((looking-at "\\s\)") (forward-char 1) (backward-list 1))
						 (t (self-insert-command (or arg 1)))))

	(defun prada ()
		 (interactive)
		 (find-file "/ssh:denist@prada:/home/denist/working_dir"))

	(defun get-point ( symbol &optional arg )
		"get the point"
		(funcall symbol arg )
		(point)
		)

	(defun copy-thing ( begin-of-thing end-of-thing &optional arg )
		"copy thing between beg & end into kill ring"
		(save-excursion
			(let ((beg (get-point begin-of-thing 1))
						(end (get-point end-of-thing arg)))
				(copy-region-as-kill beg end)))
		)

	(defun copy-word (&optional arg)
		"Copy words at point into kill-ring"
		(interactive "P")
		(copy-thing 'backward-word 'forward-word arg)
		)

	;;(global-set-key (kbd "C-b") 'copy-word)

	(require 'ansi-color)
	(defun my/ansi-colorize-buffer ()
		(let ((buffer-read-only nil))
			(ansi-color-apply-on-region (point-min) (point-max))))

	(defun my/buffer-file-name ()
		(interactive)
		(message (buffer-file-name)))

	(defun my/mark-line()
		(interactive)
		(push-mark)
		(push-mark))
#+end_src

better move to beginning of line
#+BEGIN_SRC emacs-lisp
  (defun smarter-move-beginning-of-line (arg)
    "Move point back to indentation of beginning of line.

    Move point to the first non-whitespace character on this line.
    If point is already there, move to the beginning of the line.
    Effectively toggle between the first non-whitespace character and
    the beginning of the line.

    If ARG is not nil or 1, move forward ARG - 1 lines first.  If
    point reaches the beginning or end of the buffer, stop there."
    (interactive "^p")
    (setq arg (or arg 1))

    ;; Move lines first
    (when (/= arg 1)
      (let ((line-move-visual nil))
    (forward-line (1- arg))))

    (let ((orig-point (point)))
     (back-to-indentation)
     (when (= orig-point (point))
      (move-beginning-of-line 1))))

  (global-set-key [remap move-beginning-of-line]
                   'smarter-move-beginning-of-line)

#+END_SRC

remote shell
#+BEGIN_SRC emacs-lisp
  (defun remote-shell (&optional host)
    "Open a remote shell to a host."
    (interactive)
    (with-temp-buffer
      (let ((host (if host host (read-string "Host: "))))
        (cd (concat "/ssh:denist@" host ":"))
        (shell (concat "*" host "*")))))

  (defun prada-shell ()
    (interactive)
    (remote-shell "prada"))
#+END_SRC

align whitespace
#+BEGIN_SRC emacs-lisp
(defun align-whitespace (start end)
  "Align columns by whitespace"
  (interactive "r")
  (align-regexp start end
                "\\(\\s-*\\)\\s-" 1 0 t))
#+END_SRC


#+RESULTS:
: copy-word
:
* Global Key Bindings
#+begin_src emacs-lisp
		;; Key mappings that aren't source specific
		;; I don't know what I'd do with out this one
		(define-key global-map "\C-xg" 'magit-status)

		(define-key global-map [delete] 'delete-char)
		(define-key global-map [backspace] 'delete-backward-char)
		(define-key global-map [end] 'end-of-line )
		(global-unset-key [f10] )
	;;	(global-unset-key "\C-/")
		(global-set-key "\C-w" 'backward-kill-word)
		(global-set-key "\C-xk" 'kill-region)
		(define-key global-map "\C-x\C-m" 'execute-extended-command)
		(define-key global-map "\C-x\C-x" 'kill-this-buffer)

		(define-key global-map [f1] 'goto-line)
		(define-key global-map [f2] 'undo)
		(define-key global-map [f5] 'my/buffer-file-name)
		(define-key global-map [f6] 'eval-expression)

		(define-key global-map [f8] 'my/mark-line)

		(define-key global-map [f10] 'next-error)
		(define-key global-map [f11] 'previous-error)
		(global-set-key [remap forward-word] 'forward-symbol)
		(global-set-key [remap backward-word] 'backward-symbol)
		(global-set-key "\C-f" 'forward-word)
		(global-set-key "\C-b" 'backward-to-word)
		(define-key global-map "\M-w" 'kill-ring-save)
		;;(define-key c-mode-base-map [f3] 'ag-project)
		(define-key global-map [f3] 'ag-project-regexp)
		(define-key global-map "\M-f" 'find-file)
		(global-set-key "%" 'match-paren)
		(when (display-graphic-p)
			(if (eq system-type 'darwin)
					(setq mac-command-modifier 'meta)))

#+end_src

* C/C++ Programming
#+begin_src emacs-lisp
	(use-package cc-mode
		:bind ([f9] . compile)

		:preface
		(defun my-c-mode-hook()
			(which-function-mode 1)
			;;message "In my-c-mode-hook")
			(define-key c-mode-map [f3] `ag-project-regexp)

			(define-key c-mode-map [f4] `counsel-imenu)
			(let ((bufname (buffer-file-name)))
				;;(message (format "The buffer is %s" bufname))
				(when bufname
					(cond
					 ((string-match "/denist/" bufname)
						(c-set-style "redline"))
					 ((string-match "/denistranchemontagne" bufname)
						(c-set-style "dtranche"))
					 (t
						(c-set-style "k&r"))))))
		:config
		(add-hook 'c-mode-common-hook 'my-c-mode-hook)
		(modify-syntax-entry ?_ "w" c-mode-syntax-table)
		(add-to-list 'c-style-alist
								 '("redline"
									 (indent-tabs-mode . nil)
									 (setq mode-name "Redline C Style")
									 (c-basic-offset . 5)
									 (c-basic-indent . 5)))
		(add-to-list 'c-style-alist
								 '("dtranche"
									 (indent-tabs-mode . nil)
									 (setq mode-name "dtranche C Style")
									 (c-basic-offset . 2)
									 (c-basic-indent . 2)))
		;; move to redline mode
		(setq compile-history
					'("make -j 8 USE_SANITIZE=0 server_debug_native"
						"make -j 8 USE_SANITIZE=0 server_rpm_native"
						"make -j 8 server_rpm_native"
						"make -j 8 server_debug_rhel7_x86_64"
						"make -j 8 server_rpm_rhel7_x86_64"
						"make -j 8 server_debug_rhel6_x86_64"
						"make -j 8 server_rpm_rhel6_x86_64"
						"make -j 8 server_debug_native"
						"make -j 8 server_fast_native"
						"make RTS_COMMON_PATH=/home/denist/rts-common -j 8 server_debug_rhel7_x86_64"
						"make RTS_COMMON_PATH=/home/denist/rts-common -j 8 server_rpm_rhel7_x86_64"
						"git clean -fd"
						"make -j 32 realclean")))

#+end_src

* swiper, ivy et.al.
ivy is simpler
#+begin_src emacs-lisp
  (use-package counsel
	  :ensure t
	  :bind
	  ("C-x C-f" . counsel-git)
	  ;;  (("M-y" . counsel-yank-pop)
	  ;;   :map ivy-minibuffer-map
	  ;;    ("M-y" . ivy-next-line)))
	  )

  (use-package ivy
	  :ensure t
	  :diminish (ivy-mode)
	  :bind (("C-x b" . ivy-switch-buffer)
		 ("M-n" . swiper-thing-at-point)
		 ([f7] . counsel-mark-ring)
		 (:map minibuffer-local-map
		       ([f10] . ivy-next-line)
		       ([shift-f10] . ivy-previous-line)))
	  :config
	  (ivy-mode 1)
	  (setq ivy-use-virtual-buffers t)
	  (setq ivy-display-style 'fancy)
	  (setq ivy-format-function 'ivy-format-function-arrow)
	  (setq ivy-initial-inputs-alist nil)

	  (defun ivy-with-thing-at-point (cmd)
	    (let ((ivy-initial-inputs-alist
		   (list
		    (cons cmd (thing-at-point 'symbol)))))
	      (funcall cmd)))

	  (defun swiper-thing-at-point ()
	    (interactive)
	    (ivy-with-thing-at-point 'swiper))

	  (defun my-ivy-kill-buffer (buf)
	    (interactive)
	    (if (get-buffer buf)
		(kill-buffer buf)
	      (setq recentf-list (delete (cdr (assoc buf ivy--virtual-buffers)) recentf-list))))

	  (ivy-set-actions
	   'ivy-switch-buffer
	   '(("k"
	      (lambda (x)
		(my-ivy-kill-buffer x)
		(ivy--reset-state ivy-last))
	      "kill"
	      )))
	  )

  (use-package swiper
    :ensure t
    :bind (("C-s"      . swiper)
	   ("C-r"      . swiper)
	   ("C-c C-r"  . ivy-resume)
	   ("M-x"      . counsel-M-x))
    :config
    (define-key read-expression-map (kbd "C-r") 'counsel-expression-history)
    )

  (use-package avy
	  :ensure t
	  :init (setq avy-background t)
	  :bind ("M-s" . avy-goto-word-or-subword-1))
#+end_src

# #+RESULTS
* Org
To execute the block of code use org-babel-execute-src-block
To switch to editing mode C-c ' (single quote)
#+begin_src emacs-lisp
		(use-package org
			:bind (:map org-mode-map ([f3] . org-babel-execute-src-block))
			:init
			(fset 'record_time[?\C-u ?1 ?\C-c ?! return])
			(defun my-org-mode-hook ()
				"Hook to do what I want"
				(set (make-local-variable 'company-backends)
			 '((company-capf company-dabbrev company-files)))
				(set-fill-column 100)
				(turn-on-auto-fill))

				(add-hook 'org-mode-hook 'my-org-mode-hook))


		(use-package org-bullets
			:ensure t
			:init (add-hook 'org-mode-hook 'org-bullets-mode))


		(use-package org-roam
				:if (string-equal user-login-name "denistranchemontagne")
				:hook
				(after-init . org-roam-mode)
				:init

				:config
				(setq fill-column 100)
				(auto-fill-mode 1)

				(setq org-roam-capture-templates
						'(("d" "default" plain (function org-roam-capture--get-point) "%?"
							 :file-name "%<%Y%m%d>-${slug}"
							 :head "#+TITLE: ${title}
	,#+ROAM_TAGS:
	links:"
							 :unnarrowed t)
							("b" "book" plain (function org-roam-capture--get-point) "%?"
							 :file-name "${slug}"
							 :head "#+TITLE: ${title}
	,#+AUTHOR:
	,#+ROAM_TAGS:
	links:"
							 :unnarrowed t)
							("o" "other" plain (function org-roam-capture--get-point) "%?"
							 :file-name "${slug}"
						 :head "#+TITLE: ${title}
	,#+Source:
	,#+ROAM_TAGS:
	links:"
						 :unnarrowed t)))
			:custom
			(org-roam-directory "~/zettelkasten/")
			(org-roam-completion-system 'ivy)

			:bind (:map org-roam-mode-map
									(("C-c n l" . org-roam)
									 ("C-c n f" . org-roam-find-file)
									 ("C-c n g" . org-roam-show-graph))
									:map org-mode-map
									(("C-c n i" . org-roam-insert))))



#+end_src

* Packages
** auto-complete
#+begin_src emacs-lisp
	;; (use-package auto-complete
	;; 	 :diminish auto-complete-mode
	;; 	 :bind (:map ac-complete-mode-map (("C-n" . ac-next)
	;; 																		 ("C-p" . ac-previous)))
	;; 	 :init
	;; 	 (progn
	;; 		 (ac-config-default)
	;; 		 (global-auto-complete-mode t)))
#+end_src
** company
#+begin_src emacs-lisp
	(use-package company
		:ensure t
		:config
		(setq company-idle-delay 0)
		(setq company-minimum-prefix-lenght 3)

		(define-key company-active-map (kbd "C-n") #'company-select-next)
		(define-key company-active-map (kbd "C-p") #'company-select-previous)
		(global-company-mode t))

#+end_src
** ag
#+begin_src emacs-lisp
  (use-package ag
    :init
    (setq ag-highlight-search t)
    :config
    (add-to-list 'ag-arguments "--noaffinity"))
#+end_src

** ace
#+begin_src emacs-lisp
  (use-package ace-window
    :ensure t
    :bind ("C-x o" . 'ace-window))
#+end_src
** linenum
#+begin_src emacs-lisp
;;  (use-package linum-mode
;;    :init (setq linenum-format "%d "))
#+end_src
** ediff
	 #+begin_src emacs-lisp
  (use-package ediff
    :config
    (setq ediff-split-window-function 'split-window-horizontally)
    (setq ediff-window-setup-function 'ediff-setup-windows-plain))
	 #+end_src
** magit
   #+begin_src emacs-lisp
		 (use-package magit
			 :ensure t
			 :bind
			 ("C-x g" . magit-status)
			 ("C-c g" . magit-file-dispatch)
			 :config
			 ;;(remove-hook 'magit-status-sections-hook 'magit-insert-tags-header)
			 ;;(remove-hook 'magit-status-sections-hook 'magit-insert-status-headers)
			 ;;(remove-hook 'magit-status-sections-hook 'magit-insert-unpushed-to-pushremote)
			 ;;(remove-hook 'magit-status-sections-hook 'magit-insert-unpulled-from-pushremote)
			 ;;(remove-hook 'magit-status-sections-hook 'magit-insert-unpulled-from-upstream)
			 ;;(remove-hook 'magit-status-sections-hook 'magit-insert-unpushed-to-upstream-or-recent)
			 )
   #+end_src
** which-key
   #+begin_src emacs-lisp
     (use-package which-key
       :ensure t
       :diminish (which-key-mode))
	 #+end_src

* Hydras
Try and make my use of emacs more efficient
** movement-hydra
#+begin_src emacs-lisp
	;;  (linum-relative-mode)
		;; (global-set-key
		;;  (kbd "C-n")
		;;  (defhydra hydra-move
		;;    (:pre (nlinum-mode 1)
		;;     :post (nlinum-mode -1))
		;;    "move"
		;;    ("n" next-line "down")
		;;    ("p" previous-line "up")
		;;    ("f" forward-char "forward")
		;;    ("b" backward-char "back")
		;;    ("a" beginning-of-line "start of line")
		;;    ("B" beginning-of-defun "start of func")
		;;    ("E" end-of-defun "end of func")
		;;    ("e" move-end-of-line "end of line")
		;;    ("g" goto-line "goto-line")
		;;    ("v" scroll-up-command)
		;;    ;; Converting M-v to V here by analogy.
		;;    ("V" scroll-down-command)
		;;    ("l" recenter-top-bottom)
		;;    ("q" nil )))
#+end_src
** ggtags-hydra
#+begin_src emacs-lisp
  (global-set-key
   (kbd "C-t")
   (defhydra hydra-tags
     (:pre (ggtags-mode 1 ) )
     "gtags"
     ("." ggtags-find-tag-dwim "dwim")
     ("d" ggtags-find-definition "definition")
     ("f" ggtags-find-file "file")
     ("r" ggtags-find-reference "ref.")
     ("x" ggtags-find-tag-regexp "regex")
     ("q" nil)))
#+end_src

* Testing
* Stuff to add
# (define-key ac-complete-mode-map (kbd "C-n") 'ac-next)

# (define-key ac-complete-mode-map (kbd "C-p") 'ac-previous)

# USE WHEN THE COMPILATION BUFFER GETS MESSED UP

* Removed
